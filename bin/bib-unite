#!/bin/bash
# Unite bibfiles with sorted keys

function usage() {
    cat 1>&2 <<EOF
$(basename $0): Unite bibfiles with sorted keys

Exact duplicates of an entry are silently dropped.

USAGE: $(basename $0) [-e] [-r] [-y] bibfiles
Options:
  -h  print this help
  -e  do not sort fields in entries
  -o  omit sorting entries
  -r  newest entries first (by year)
  -y  use year as first sort key
EOF
    exit $1
}
if [ $# -lt 1 ]; then usage 1; fi

# Default options.
RYEAR= # Show newest entries last.
FIELDSORT=1 # Sort fields within entries.
ENTRYSORT=1 # Sort entries in bibtex file.

# Parse command line options.
for arg; do
    # With option '-h' print usage and exit.
    if [[ "$arg" == "-h" ]]; then usage 0; fi
done

# With option '-e' do not sort fields.
if [[ "$1" == "-e" ]]; then
    FIELDSORT=0
    shift
fi

# With option '-o' do only sort fields.
if [[ "$1" == "-o" ]]; then
    ENTRYSORT=0
    shift
fi

# With option '-r' show newest entries first.
if [[ "$1" == "-r" ]]; then
    RYEAR=-r
    shift
fi

# Default sorting order.
UNIQ="sort -u"
PRIMARY="sort -sf -k1,1" # First sort key.
SECONDARY="sort -sn -k2,2 $RYEAR" # Second sort key.
TERTIARY="sort -sf -k3,3" # Third sort key.

# With option '-y' use year as first sort key.
if [[ "$1" == "-y" ]]; then
    TMP="$PRIMARY"
    PRIMARY="$SECONDARY"
    SECONDARY="$TMP"
    shift
fi

# If not desired, do not sort entries.
if [ $ENTRYSORT -eq 0 ]
then
    UNIQ="uniq"
    PRIMARY="cat"
    SECONDARY="cat"
    TERTIARY="cat"
fi


# Check for multi line entries and abort if any.
if [ $FIELDSORT -eq 1 ] && grep -H -n '^[^@}% ]' -- "$@" 1>&2
then
    echo "" 1>&2
    echo "bib-unite: There are multi line fields! Aborting." 1>&2
    echo "bib-unite: Please remove the newlines (see above)." 1>&2
    exit 1
fi


# Concatenate and sort all files.
sed '1s/^/\n\n/;$s/^$/\n@/;N;s/\([^\n]\)\n@/\1\n\n@/;P;D' -- "$@" \
    | gawk '
BEGIN {
    RS="\n\n@"
    ORS="\n"
    FS="\n"
    OFS="\0" # Requires GNU AWK.
}
{
    # Print one line records with fields delimited by NUL.
    for(i=1; i<=NF; i++) {
        # Add empty field in the beginning.
        printf("%s%s", OFS, $i)
    }
    printf(ORS)
}
' \
    | sed '/^\x00Comment{jabref-meta/d' \
    | sed '/^\x00/!d;/^\x00\x00$/d;/^\x00\x00\x00/d' \
    | sed 'h;s/^\x00[^{]*{//;s/,\x00.*//;s/:/ /;s/\([a-z][a-z]*\)\( [^\x00]*\)/\2\1/;s/[0-9][0-9]* / &/;G;s/\n/\x00/' \
    | sed 's/}\x00\x00*$/}/' \
    | $UNIQ \
    | $TERTIARY \
    | $SECONDARY \
    | $PRIMARY \
    | sed 's/^[^\x00]*\x00\x00/\x00/' \
    | gawk -v fieldsort=$FIELDSORT '
BEGIN {
    RS="\n"
    FS="\0" # Requires GNU AWK.
    ORS="\n\n"
    OFS="\n"
}
{
    # Split citation entry into fields.
    split($0, a)

    # Entry type without citation key.
    type = $2
    sub("{.*", "", type)

    # Sort fields if desired.
    if (fieldsort) {
        loopshift=0 # @ will be on previous before last line.
        # Rename fields to mostly sort like JabRef.
        for(i=1; i<=NF; i++) {
            if (match(type, "^Misc")) {
                gsub("^  Author", "  01Author", a[i])
                gsub("^  Title", "  02Title", a[i])
                gsub("^  Howpublished", "  03Howpublished", a[i])
                gsub("^  Month", "  04Month", a[i])
                gsub("^  Year", "  05Year", a[i])
                gsub("^  Note", "  06Note", a[i])
            } else if (match(type, "^[^}]*thesis")) {
                gsub("^  Author", "  01Author", a[i])
                gsub("^  Title", "  02Title", a[i])
                gsub("^  School", "  03School", a[i])
                gsub("^  Year", "  04Year", a[i])
                gsub("^  Type", "  05Type", a[i])
                gsub("^  Month", "  06Month", a[i])
            } else if (match(type, "^In[cp]")) {
                gsub("^  Author", "  01Author", a[i])
                gsub("^  Title", "  02Title", a[i])
                gsub("^  Booktitle", "  03Booktitle", a[i])
                if (match(type, "^Incollection")) {
                    gsub("^  Publisher", "  03Publisher", a[i])
                }
                gsub("^  Year", "  04Year", a[i])
                gsub("^  Editor", "  05Editor", a[i])
                gsub("^  Volume", "  06Volume", a[i])
                gsub("^  Number", "  07Number", a[i])
                gsub("^  Series", "  08Series", a[i])
                gsub("^  Pages", "  09Pages", a[i])
                gsub("^  Address", "  10Address", a[i])
                gsub("^  Month", "  11Month", a[i])
                gsub("^  Organization", "  12Organization", a[i])
                gsub("^  Publisher", "  13Publisher", a[i])
                gsub("^  Note", "  14Note", a[i])
            } else if (match(type, "^In") || match(type, "^Book")) {
                gsub("^  Chapter", "  01Chapter", a[i])
                gsub("^  Pages", "  02Pages", a[i])
                gsub("^  Title", "  03Title", a[i])
                gsub("^  Publisher", "  04Publisher", a[i])
                gsub("^  Year", "  05Year", a[i])
                gsub("^  Author", "  06Author", a[i])
                gsub("^  Editor", "  07Editor", a[i])
                gsub("^  Volume", "  08Volume", a[i])
                gsub("^  Number", "  09Number", a[i])
                gsub("^  Series", "  10Series", a[i])
                if (!match(type, "^Book"))
                gsub("^  Type", "  11Type", a[i])
                gsub("^  Address", "  12Address", a[i])
                gsub("^  Month", "  13Month", a[i])
                gsub("^  Isbn", "  14Isbn", a[i])
                gsub("^  Note", "  15Note", a[i])
            } else {
                gsub("^  Author", "  01Author", a[i])
                gsub("^  Title", "  02Title", a[i])
                gsub("^  Journal", "  03Journal", a[i])
                gsub("^  Year", "  04Year", a[i])
                gsub("^  Volume", "  05Volume", a[i])
                gsub("^  Number", "  06Number", a[i])
                gsub("^  Pages", "  07Pages", a[i])
                gsub("^  Month", "  08Month", a[i])
                gsub("^  ISSN", "  09ISSN", a[i])
                gsub("^  Note", "  10Note", a[i])
            }
            gsub("^ __", "  20__", a[i])
            # Enforce title case for case insensitive sorting.
            if (match(a[i], "^  [a-z][a-z]*-")) {
                a[i] = toupper(substr(a[i], 1, 3)) substr(a[i], 4)
            }
        }
        if (length(a[NF]) > 1) {
            if (match(a[NF], "}$") == length(a[NF])) {
                a[NF] = substr(a[NF], 0, length(a[NF]) - 1)
                a[NF+1] = "}"
                NF += 1
            }
        }
        # Sort
        asort(a)
        # Restore original field names.
        for(i=1; i<=NF; i++) {
            if (match(type, "^Misc")) {
                gsub("^  01Author", "  Author", a[i])
                gsub("^  02Title", "  Title", a[i])
                gsub("^  03Howpublished", "  Howpublished", a[i])
                gsub("^  04Month", "  Month", a[i])
                gsub("^  05Year", "  Year", a[i])
                gsub("^  06Note", "  Note", a[i])
            } else if (match(type, "^[^}]*thesis")) {
                gsub("^  01Author", "  Author", a[i])
                gsub("^  02Title", "  Title", a[i])
                gsub("^  03School", "  School", a[i])
                gsub("^  04Year", "  Year", a[i])
                gsub("^  05Type", "  Type", a[i])
                gsub("^  06Month", "  Month", a[i])
            } else if (match(type, "^In[cp]")) {
                gsub("^  01Author", "  Author", a[i])
                gsub("^  02Title", "  Title", a[i])
                gsub("^  03Booktitle", "  Booktitle", a[i])
                gsub("^  04Year", "  Year", a[i])
                gsub("^  05Editor", "  Editor", a[i])
                gsub("^  06Volume", "  Volume", a[i])
                gsub("^  07Number", "  Number", a[i])
                gsub("^  08Series", "  Series", a[i])
                gsub("^  09Pages", "  Pages", a[i])
                gsub("^  10Address", "  Address", a[i])
                gsub("^  11Month", "  Month", a[i])
                gsub("^  12Organization", "  Organization", a[i])
                gsub("^  [01]3Publisher", "  Publisher", a[i])
                gsub("^  14Note", "  Note", a[i])
            } else if (match(type, "^In") || match(type, "^Book")) {
                gsub("^  01Chapter", "  Chapter", a[i])
                gsub("^  02Pages", "  Pages", a[i])
                gsub("^  03Title", "  Title", a[i])
                gsub("^  04Publisher", "  Publisher", a[i])
                gsub("^  05Year", "  Year", a[i])
                gsub("^  06Author", "  Author", a[i])
                gsub("^  07Editor", "  Editor", a[i])
                gsub("^  08Volume", "  Volume", a[i])
                gsub("^  09Number", "  Number", a[i])
                gsub("^  10Series", "  Series", a[i])
                gsub("^  11Type", "  Type", a[i])
                gsub("^  12Address", "  Address", a[i])
                gsub("^  13Month", "  Month", a[i])
                gsub("^  14Isbn", "  Isbn", a[i])
                gsub("^  15Note", "  Note", a[i])
            } else {
                gsub("^  01Author", "  Author", a[i])
                gsub("^  02Title", "  Title", a[i])
                gsub("^  03Journal", "  Journal", a[i])
                gsub("^  04Year", "  Year", a[i])
                gsub("^  05Volume", "  Volume", a[i])
                gsub("^  06Number", "  Number", a[i])
                gsub("^  07Pages", "  Pages", a[i])
                gsub("^  08Month", "  Month", a[i])
                gsub("^  09ISSN", "  ISSN", a[i])
                gsub("^  10Note", "  Note", a[i])
            }
            gsub("^  20__", " __", a[i])
            # Restore title case.
            if (match(a[i], "^  [A-Z][a-z]*-")) {
                a[i] = tolower(substr(a[i], 1, 3)) substr(a[i], 4)
            }
        }
    } else {
        loopshift=1 # @ will be on first line.
    }

    # Print record separator.
    if (NR > 1) {
        printf(ORS)
    }

    # Print entry type with citation key.
    if (loopshift) {
        printf("@%s", a[2])
    } else {
        printf("@%s", a[NF-1])
    }

    # Print fields.
    for (i=1+2*loopshift; i<NF-1+loopshift; i++) {
        if (a[i] != "") {
            if (i < NF-2+loopshift) {
                gsub("} *$", "},", a[i])
            } else {
                gsub("}, *$", "}", a[i])
            }
            printf("%s%s", OFS, a[i])
        }
    }

    # Print closing bracket.
    printf("%s%s", OFS, a[NF])
}
END {
    printf("\n\n")
}
'
