#!/bin/bash
# Test the bib-format script.

# Variables for testing.

# Functions to write example contents.
writeFileOne() { # Example for bibtex file provided by the journal (curly brackets in title added).
  cat <<EOF
@Article{doi:10.1021/acs.jpca.8b08286,
author = {Olasz, Balázs and Czakó, Gábor},
title = {{Mode-Specific Quasiclassical Dynamics of the F– + CH3I {SN2} and Proton-Transfer Reactions}},
journal = {The Journal of Physical Chemistry A},
volume = {122},
number = 41,
pages = "8143-8151",
year = {2018},
doi = {10.1021/acs.jpca.8b08286},
    note ={PMID: 30230832},

URL = { 
        https://doi.org/10.1021/acs.jpca.8b08286
    
},
eprint = { 
        https://doi.org/10.1021/acs.jpca.8b08286
    
}
,
    abstract = { Mode-specific quasiclassical trajectory computations are performed for the F– +
        CH3I  vk = 0, 1
        CH3I(vk = 0, 1) SN2 and proton-transfer reactions at nine different collision energies in the range
        of 1.0–35.3 kcal/mol using a full-dimensional high-level ab initio analytical potential energy surface
        with ground-state and excited CI stretching (v3), CH3 rocking (v6), CH3 umbrella (v2), CH3 deformation
        (v5), CH symmetric stretching (v1), and CH asymmetric stretching (v4) initial vibrational modes.
        Millions of trajectories provide statistically definitive mode-specific cross sections, opacity
functions, scattering angle distributions, and product internal energy distributions. The excitation
functions reveal slight vibrational SN2 inversion inhibition/enhancement at low/high collision energies
        (Ecoll), whereas large decaying-with-Ecoll vibrational enhancement effects for the SN2 retention
        (double inversion) and proton-transfer channels. The most efficient vibrational enhancement is found by
        exciting the CI stretching (high Ecoll) for SN2 inversion and the CH stretching modes (low Ecoll) for
        double inversion and proton transfer. Mode-specific effects do not show up in the scattering angle
        distributions and do blue-shift the hot/cold SN2/proton-transfer product internal energies. }
}

@Article{Czako2009:jpc,
  author = "Czakó, Gábor and Bowman, Joel M.",
  journal = "Journal of Chemical Physics",
  year = "2009",
  url = "https://doi.org/10.1063/1.3276633",
  doi = "doi.org/10.1063/1.3276633"
}
EOF
}

writeFileTwo() { # Same bibtex file after structural formatting.
  cat <<EOF
@Article{doi:10.1021/acs.jpca.8b08286,
  Author                   = {Olasz, Balázs and Czakó, Gábor},
  Title                    = {Mode-Specific Quasiclassical Dynamics of the F– + CH3I {SN2} and Proton-Transfer Reactions},
  Journal                  = {The Journal of Physical Chemistry A},
  Volume                   = {122},
  Number                   = {41},
  Pages                    = {8143-8151},
  Year                     = {2018},
  Doi                      = {10.1021/acs.jpca.8b08286},
  Note                     = {PMID: 30230832},

  Url                      = {https://doi.org/10.1021/acs.jpca.8b08286},
  Eprint                   = {https://doi.org/10.1021/acs.jpca.8b08286},
  Abstract                 = {Mode-specific quasiclassical trajectory computations are performed for the F– + CH3I vk = 0, 1 CH3I(vk = 0, 1) SN2 and proton-transfer reactions at nine different collision energies in the range of 1.0–35.3 kcal/mol using a full-dimensional high-level ab initio analytical potential energy surface with ground-state and excited CI stretching (v3), CH3 rocking (v6), CH3 umbrella (v2), CH3 deformation (v5), CH symmetric stretching (v1), and CH asymmetric stretching (v4) initial vibrational modes. Millions of trajectories provide statistically definitive mode-specific cross sections, opacity functions, scattering angle distributions, and product internal energy distributions. The excitation functions reveal slight vibrational SN2 inversion inhibition/enhancement at low/high collision energies (Ecoll), whereas large decaying-with-Ecoll vibrational enhancement effects for the SN2 retention (double inversion) and proton-transfer channels. The most efficient vibrational enhancement is found by exciting the CI stretching (high Ecoll) for SN2 inversion and the CH stretching modes (low Ecoll) for double inversion and proton transfer. Mode-specific effects do not show up in the scattering angle distributions and do blue-shift the hot/cold SN2/proton-transfer product internal energies.}
}

@Article{Czako2009:jpc,
  Author                   = {Czakó, Gábor and Bowman, Joel M.},
  Journal                  = {Journal of Chemical Physics},
  Year                     = {2009},
  Url                      = {https://doi.org/10.1063/1.3276633},
  Doi                      = {doi.org/10.1063/1.3276633}
}

EOF
}

writeFileThree() { # Completely formatted file.
  cat <<EOF
@Article{doi:10.1021/acs.jpca.8b08286,
  Author                   = {Olasz, Bal\'{a}zs and Czak\'{o}, G\'{a}bor},
  Title                    = {Mode-Specific Quasiclassical Dynamics of the F- + CH3I {SN2} and Proton-Transfer Reactions},
  Journal                  = {Journal of Physical Chemistry A},
  Volume                   = {122},
  Number                   = {41},
  Pages                    = {8143--8151},
  Year                     = {2018},
  Doi                      = {10.1021/acs.jpca.8b08286},
  Note                     = {PMID: 30230832},

  Abstract                 = {Mode-specific quasiclassical trajectory computations are performed for the F– + CH3I vk = 0, 1 CH3I(vk = 0, 1) SN2 and proton-transfer reactions at nine different collision energies in the range of 1.0–35.3 kcal/mol using a full-dimensional high-level ab initio analytical potential energy surface with ground-state and excited CI stretching (v3), CH3 rocking (v6), CH3 umbrella (v2), CH3 deformation (v5), CH symmetric stretching (v1), and CH asymmetric stretching (v4) initial vibrational modes. Millions of trajectories provide statistically definitive mode-specific cross sections, opacity functions, scattering angle distributions, and product internal energy distributions. The excitation functions reveal slight vibrational SN2 inversion inhibition/enhancement at low/high collision energies (Ecoll), whereas large decaying-with-Ecoll vibrational enhancement effects for the SN2 retention (double inversion) and proton-transfer channels. The most efficient vibrational enhancement is found by exciting the CI stretching (high Ecoll) for SN2 inversion and the CH stretching modes (low Ecoll) for double inversion and proton transfer. Mode-specific effects do not show up in the scattering angle distributions and do blue-shift the hot/cold SN2/proton-transfer product internal energies.}
}

@Article{Czako2009:jpc,
  Author                   = {Czak\'{o}, G\'{a}bor and Bowman, Joel M.},
  Journal                  = {Journal of Chemical Physics},
  Year                     = {2009},
  Doi                      = {10.1063/1.3276633}
}

EOF
}

# Initially create temporary files for all tests.
oneTimeSetUp() {
  fileOne=$(mktemp -u -t tmp.XXXXXX).bib
  fileTwo=$(mktemp -u -t tmp.XXXXXX).bib
  fileThree=$(mktemp -u -t tmp.XXXXXX).bib
  touch $fileOne $fileTwo $fileThree
}

# Finally remove temporary files for all tests.
oneTimeTearDown() {
  test ! -e $fileOne || rm $fileOne
  test ! -e $fileTwo || rm $fileTwo
  test ! -e $fileThree || rm $fileThree
}

# For each test reset the temporary file contents.
setUp() {
  writeFileOne > $fileOne
  writeFileTwo > $fileTwo
  writeFileThree > $fileThree
}

# _____________________________________________________________________________

testPrintNonAsciiCharacters() {
  # Four or three lines contain non ascii characters.
  assertEquals '4' "$(bib-format -p $fileOne | wc -l)"
  assertEquals '3' "$(bib-format -p $fileTwo | wc -l)"
  assertTrue 'file1 contains á' "bib-format -p $fileOne   | grep -q 'á'"
  assertTrue 'file1 contains ó' "bib-format -p $fileOne   | grep -q 'ó'"
  assertTrue 'file1 contains –' "bib-format -p $fileOne   | grep -q '–'"
  assertTrue 'file2 contains á' "bib-format -p $fileTwo   | grep -q 'á'"
  assertTrue 'file2 contains ó' "bib-format -p $fileTwo   | grep -q 'ó'"
  assertTrue 'file2 contains –' "bib-format -p $fileTwo   | grep -q '–'"
  # No non ascii characters in third file.
  assertEquals '0' "$(bib-format -p $fileThree | wc -l)"
}

testPrintChangesStructure() {
  bib-format -n -u $fileOne >/dev/null
  bib-format -n -u $fileTwo >/dev/null
  bib-format -n -u $fileThree >/dev/null
  assertTrue 'file1 unchanged with -n -u' "writeFileOne   | diff - $fileOne" \
      || writeFileOne   | diff - $fileOne
  assertTrue 'file2 unchanged with -n -u' "writeFileTwo   | diff - $fileTwo" \
      || writeFileTwo   | diff - $fileTwo
  assertTrue 'file3 unchanged with -n -u' "writeFileThree | diff - $fileThree" \
      || writeFileThree | diff - $fileThree
}

testPrintChangesContent() {
  bib-format -n $fileOne >/dev/null
  bib-format -n $fileTwo >/dev/null
  bib-format -n $fileThree >/dev/null
  assertTrue 'file1 unchanged with -n'    "writeFileOne   | diff - $fileOne" \
      || writeFileOne   | diff - $fileOne
  assertTrue 'file2 unchanged with -n'    "writeFileTwo   | diff - $fileTwo" \
      || writeFileTwo   | diff - $fileTwo
  assertTrue 'file3 unchanged with -n'    "writeFileThree | diff - $fileThree" \
      || writeFileThree | diff - $fileThree
}

testWhiteSpace() {
  echo '  Field = { one  two three  } 	 ' > $fileOne
  bib-format $fileOne
  assertEquals '  Field                    = {one two three}' "$(cat $fileOne)"
  echo '   Field = {one  two three  }, 	 ' > $fileOne
  bib-format $fileOne
  assertEquals '  Field                    = {one two three},' "$(cat $fileOne)"
  echo ' Field = "one  two three  ", 	 ' > $fileOne
  bib-format $fileOne
  assertEquals '  Field                    = {one two three},' "$(cat $fileOne)"
}

testTitleCaseTypeAndFields() {
  echo '@article{any2010:cde' > $fileOne
  bib-format $fileOne
  assertEquals '@Article{any2010:cde' "$(cat $fileOne)"
  echo 'field = {}' > $fileOne
  bib-format $fileOne
  assertEquals '  Field                    = {}' "$(cat $fileOne)"
}

testQuotesToCurlyBrackets() {
  echo '  Field = "some text"' > $fileOne
  bib-format $fileOne
  assertEquals '  Field                    = {some text}' "$(cat $fileOne)"
  echo '  Field = "some "more" text",' > $fileOne
  bib-format $fileOne
  assertEquals '  Field                    = {some "more" text},' "$(cat $fileOne)"
  echo '  Field = "some multi
line text
 row 3",' > $fileOne
  bib-format $fileOne
  assertEquals '  Field                    = {some multi line text row 3},' "$(cat $fileOne)"
  echo '  Field = "Two lines
and no comma",' > $fileOne
  bib-format $fileOne
  assertEquals '  Field                    = {Two lines and no comma},' "$(cat $fileOne)"
  echo '  Field = "inner "quotes"
here",' > $fileOne
  bib-format $fileOne
  assertEquals '  Field                    = {inner "quotes" here},' "$(cat $fileOne)"
  # Quoted field followed by closing curly bracket.
  echo '@Article{,
  Field = "some text"}' > $fileOne
  bib-format $fileOne
  assertEquals '@Article{,
  Field                    = {some text}
}' "$(cat $fileOne)"
}

testCurlyBracketsInField() {
  echo '  Field = "some {More} text"' > $fileOne
  bib-format $fileOne
  assertEquals '  Field                    = {some {More} text}' "$(cat $fileOne)"
  echo '  Field = {some {More} text}' > $fileOne
  bib-format $fileOne
  assertEquals '  Field                    = {some {More} text}' "$(cat $fileOne)"
  echo '  Field = {{some text}}' > $fileOne
  bib-format $fileOne
  assertEquals '  Field                    = {some text}' "$(cat $fileOne)"
  echo '  Field = "{some {More} text}"' > $fileOne
  bib-format $fileOne
  assertEquals '  Field                    = {some {More} text}' "$(cat $fileOne)"
  echo '  Field = {{some {More} text}}' > $fileOne
  bib-format $fileOne
  assertEquals '  Field                    = {some {More} text}' "$(cat $fileOne)"
  echo '  Field = {{{start} text {end}}}' > $fileOne
  bib-format $fileOne
  assertEquals '  Field                    = {{start} text {end}}' "$(cat $fileOne)"
  echo '  Field = {{start} text {end}}' > $fileOne
  bib-format $fileOne
  assertEquals '  Field                    = {{start} text {end}}' "$(cat $fileOne)"
  echo '  Field = {{start} text end}' > $fileOne
  bib-format $fileOne
  assertEquals '  Field                    = {{start} text end}' "$(cat $fileOne)"
  echo '  Field = {start text {end}}' > $fileOne
  bib-format $fileOne
  assertEquals '  Field                    = {start text {end}}' "$(cat $fileOne)"
}

testClosingBracketOnNewLine() {
  # Closing curly braces should be moved to a new line.
  echo 'Field = {some text}}' > $fileOne
  bib-format $fileOne
  assertEquals '  Field                    = {some text}
}' "$(cat $fileOne)"
  # Also handle the more difficult case with extra braces.
  echo 'Field = {some {special} text}}' > $fileOne
  bib-format $fileOne
  assertEquals '  Field                    = {some {special} text}
}' "$(cat $fileOne)"
  # Extra braces could also be closed just before the end.
  echo 'Field = {some {special text}}}' > $fileOne
  bib-format $fileOne
  assertEquals '  Field                    = {some {special text}}
}' "$(cat $fileOne)"
  # Test case with several extra pairs of braces.
  echo 'Field = {two {special} {words}}}' > $fileOne
  bib-format $fileOne
  assertEquals '  Field                    = {two {special} {words}}
}' "$(cat $fileOne)"
  # However, other curly braces should not be moved.
  echo 'Field = {some {special text}}' > $fileOne
  bib-format $fileOne
  assertEquals '  Field                    = {some {special text}}' "$(cat $fileOne)"
}

testMergeLinesWithBraces() {
  # Simple one
  echo '  Field = {some
text}' > $fileOne
  bib-format $fileOne
  assertEquals '  Field                    = {some text}' "$(cat $fileOne)"
  # Brackets with own line
  echo '  Field = {
some text
},' > $fileOne
  bib-format $fileOne
  assertEquals '  Field                    = {some text},' "$(cat $fileOne)"
  # Only first line without content
  echo '  Field = {
some text},' > $fileOne
  bib-format $fileOne
  assertEquals '  Field                    = {some text},' "$(cat $fileOne)"
  # Over three lines
  echo '  Field = {some
text over
    three lines }' > $fileOne
  bib-format $fileOne
  assertEquals '  Field                    = {some text over three lines}' "$(cat $fileOne)"
  # Additionally with blank line
  echo '  eprint = {
        https://doi.org/10.1021/acs.jpca.8b08286

}' > $fileOne
  bib-format $fileOne
  assertEquals '  Eprint                   = {https://doi.org/10.1021/acs.jpca.8b08286}' "$(cat $fileOne)"
  # Within a record context
  echo '@Article{,
  Field = {some
text}
}' > $fileOne
  bib-format $fileOne
  assertEquals '@Article{,
  Field                    = {some text}
}' "$(cat $fileOne)"
  # Context with adjacent entries
  echo '@Article{,
  Title = {Article title},
  Field = {some
text},
  Number = {6454}
}' > $fileOne
  bib-format $fileOne
  assertEquals '@Article{,
  Title                    = {Article title},
  Field                    = {some text},
  Number                   = {6454}
}' "$(cat $fileOne)"
  # Several lines with trailing commas
  echo '@Article{,
  Title = {Article title},
  Author = {Name,
  First and Another,
  Second}
}' > $fileOne
  bib-format $fileOne
  assertEquals '@Article{,
  Title                    = {Article title},
  Author                   = {Name, First and Another, Second}
}' "$(cat $fileOne)"
  # Trailing commas and adjacent entry
  echo '@Article{,
  Title = {Article title},
  Author = {Name,
  First and Another,
  Second}
}' > $fileOne
  bib-format $fileOne
  assertEquals '@Article{,
  Title                    = {Article title},
  Author                   = {Name, First and Another, Second}
}' "$(cat $fileOne)"
}

testUnchangedUrls() {
  echo '  Url = {http://sci.xyz/pdf/GetPDF?filetype=pdf&id=abc}' > $fileOne
  bib-format $fileOne
  assertEquals '  Url                      = {http://sci.xyz/pdf/GetPDF?filetype=pdf&id=abc}' "$(cat $fileOne)"
}

testUsingUrlAsDoi() {
  echo '  Url = {https://doi.org/10.1021/acs.jpca.8b08286}' > $fileOne
  bib-format $fileOne
  assertEquals '  Doi                      = {10.1021/acs.jpca.8b08286}' "$(cat $fileOne)"
}

testLatexEscaping() {
  echo '  Anyfield = {Problematic ampersand & a 100% chance to miss the closing curly bracket.}' > $fileOne
  bib-format $fileOne
  assertEquals '  Anyfield                 = {Problematic ampersand \& a 100\% chance to miss the closing curly bracket.}' "$(cat $fileOne)"
  echo '  Abstract = {Problematic ampersand & a 100% chance to miss the closing curly bracket.}' > $fileOne
  bib-format $fileOne
  assertEquals '  Abstract                 = {Problematic ampersand & a 100\% chance to miss the closing curly bracket.}' "$(cat $fileOne)"
}

testFormatStructure() {
  bib-format -u $fileOne
  bib-format -u $fileTwo
  bib-format -u $fileThree
  assertTrue 'structure in file1 formatted' "diff $fileOne   $fileTwo" \
      || diff $fileOne   $fileTwo
  assertTrue 'structure in file2 unchanged' "writeFileTwo   | diff - $fileTwo" \
      || writeFileTwo   | diff - $fileTwo
  assertTrue 'structure in file3 unchanged' "writeFileThree | diff - $fileThree" \
      || writeFileThree | diff - $fileThree
}

testFormatContent() {
  bib-format $fileOne
  bib-format $fileTwo
  bib-format $fileThree
  assertTrue 'content in file1 formatted'   "diff $fileOne   $fileThree" \
      || diff $fileOne   $fileThree
  assertTrue 'content in file2 formatted'   "diff $fileTwo   $fileThree" \
      || diff $fileTwo   $fileThree
  assertTrue 'content in file3 unchanged'   "writeFileThree | diff - $fileThree" \
      || writeFileThree | diff - $fileThree
}

# Load and run shUnit2.
. shunit2/shunit2
