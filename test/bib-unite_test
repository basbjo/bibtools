#!/bin/bash
# Test the bib-unite script.

# Variables for testing.

# Functions to write example contents.
writeFileOne() { # Bibtex file in default order.
    cat <<EOF
@Article{Czako2019b:pccp,
  Author                   = {Czak\'{o}, G\'{a}bor and Olasz, Bal\'{a}zs},
  Journal                  = {Phys. Chem. Chem. Phys.},
  Year                     = {2019},
  File                     = {:by_citekey/subdir/Czako_2019_JPCA.pdf:PDF}
}

@Article{Olasz2017:cs,
  Author                   = {Olasz, Bal\'{a}zs and Szab\'{o}, Istv\'{a}n and Czak\'{o}, G\'{a}bor},
  Journal                  = {Chem. Sci.},
  Year                     = {2017}
}

@Article{Olasz2019:jpca,
  Author                   = {Olasz, Bal\'{a}zs and Czak\'{o}, G\'{a}bor},
  Journal                  = {J. Phys. Chem. A},
  Year                     = {2019}
}

EOF
}

writeFileTwo() { # Bibtex file with newest entries first.
    cat <<EOF
@Article{Czako2019b:pccp,
  Author                   = {Czak\'{o}, G\'{a}bor and Olasz, Bal\'{a}zs},
  Journal                  = {Phys. Chem. Chem. Phys.},
  Year                     = {2019},
  File                     = {:by_citekey/subdir/Czako_2019_JPCA.pdf:PDF}
}

@Article{Olasz2019:jpca,
  Author                   = {Olasz, Bal\'{a}zs and Czak\'{o}, G\'{a}bor},
  Journal                  = {J. Phys. Chem. A},
  Year                     = {2019}
}

@Article{Olasz2017:cs,
  Author                   = {Olasz, Bal\'{a}zs and Szab\'{o}, Istv\'{a}n and Czak\'{o}, G\'{a}bor},
  Journal                  = {Chem. Sci.},
  Year                     = {2017}
}

EOF
}

writeFileThree() { # Bibtex file with meta information by JabRef.
    cat <<EOF
% Encoding: UTF-8
@Article{Olasz2017:cs,
  Author                   = {Olasz, Bal\'{a}zs and Szab\'{o}, Istv\'{a}n and Czak\'{o}, G\'{a}bor},
  Journal                  = {Chem. Sci.},
  Year                     = {2017}
}

@Comment{jabref-meta:
  databaseType:bibtex;
  otherInfo:text;
}
EOF
}

writeFileFour() { # Bibtex file sorted with year as first key.
    cat <<EOF
@Article{Olasz2017:cs,
  Author                   = {Olasz, Bal\'{a}zs and Szab\'{o}, Istv\'{a}n and Czak\'{o}, G\'{a}bor},
  Journal                  = {Chem. Sci.},
  Year                     = {2017}
}

@Article{Czako2019b:pccp,
  Author                   = {Czak\'{o}, G\'{a}bor and Olasz, Bal\'{a}zs},
  Journal                  = {Phys. Chem. Chem. Phys.},
  Year                     = {2019},
  File                     = {:by_citekey/subdir/Czako_2019_JPCA.pdf:PDF}
}

@Article{Olasz2019:jpca,
  Author                   = {Olasz, Bal\'{a}zs and Czak\'{o}, G\'{a}bor},
  Journal                  = {J. Phys. Chem. A},
  Year                     = {2019}
}

EOF
}

writeFileFive() { # Bibtex file sorted with year as first key and newest first.
    cat <<EOF
@Article{Czako2019b:pccp,
  Author                   = {Czak\'{o}, G\'{a}bor and Olasz, Bal\'{a}zs},
  Journal                  = {Phys. Chem. Chem. Phys.},
  Year                     = {2019},
  File                     = {:by_citekey/subdir/Czako_2019_JPCA.pdf:PDF}
}

@Article{Olasz2019:jpca,
  Author                   = {Olasz, Bal\'{a}zs and Czak\'{o}, G\'{a}bor},
  Journal                  = {J. Phys. Chem. A},
  Year                     = {2019}
}

@Article{Olasz2017:cs,
  Author                   = {Olasz, Bal\'{a}zs and Szab\'{o}, Istv\'{a}n and Czak\'{o}, G\'{a}bor},
  Journal                  = {Chem. Sci.},
  Year                     = {2017}
}

EOF
}

# Initially create temporary files for all tests.
oneTimeSetUp() {
  fileOne=$(mktemp -u -t tmp.XXXXXX).bib
  fileTwo=$(mktemp -u -t tmp.XXXXXX).bib
  fileFour=$(mktemp -u -t tmp.XXXXXX).bib
  fileFive=$(mktemp -u -t tmp.XXXXXX).bib
  touch $fileOne $fileTwo $fileFour $fileFive
}

# Finally remove temporary files for all tests.
oneTimeTearDown() {
  test ! -e $fileOne || rm $fileOne
  test ! -e $fileTwo || rm $fileTwo
  test ! -e $fileFour || rm $fileFour
  test ! -e $fileFive || rm $fileFive
}

# For each test reset the temporary file contents.
setUp() {
  writeFileOne > $fileOne
  writeFileTwo > $fileTwo
  writeFileFour > $fileFour
  writeFileFive > $fileFive
  test ! -d by_citekey || rm -rf by_citekey
  bib-separate $fileOne >/dev/null
}

# After each test remove output files.
tearDown() {
  test ! -d by_citekey || rm -rf by_citekey
}

# _____________________________________________________________________________

testUnitingSeparatedFiles() {
  assertFalse 'Simple concatenation has wrong order' \
      "cat by_citekey/*.bib by_citekey/*/*.bib | diff $fileOne -"
  assertTrue 'United file is identical to original file' \
      "bib-unite by_citekey/*.bib by_citekey/*/*.bib | diff $fileOne -"
  bib-unite by_citekey/*.bib by_citekey/*/*.bib | diff $fileOne -
}

testRemovingJabRefComments() {
  writeFileThree > by_citekey/Olasz_2017_CS.pdf.bib
  assertTrue 'United file is identical to original file' \
      "bib-unite by_citekey/*.bib by_citekey/*/*.bib | diff $fileOne -"
}

testUnitingWithSorting() {
  assertFalse 'Default order has newest entries last' \
      "bib-unite by_citekey/*.bib by_citekey/*/*.bib | diff $fileTwo -"
  assertTrue 'United file with newest entries first' \
      "bib-unite -r by_citekey/*.bib by_citekey/*/*.bib | diff $fileTwo -"
  assertTrue 'United file with year as first sort key' \
      "bib-unite -y by_citekey/*.bib by_citekey/*/*.bib | diff $fileFour -"
  assertTrue 'United file with latest year first' \
      "bib-unite -r -y by_citekey/*.bib by_citekey/*/*.bib | diff $fileFive -"
  assertFalse 'Assure that tests could fail' \
      "bib-unite -r -y by_citekey/*.bib by_citekey/*/*.bib | diff $fileFour -"
}

testUnitingWithoutSorting() {
  assertTrue 'United file without sorting' "bib-unite -o $fileTwo | diff $fileTwo -"
}

testDropDuplicates() {
  assertTrue 'Drop exact duplicates' "bib-unite $fileOne $fileTwo | diff $fileOne -"
  assertTrue 'Drop exact duplicates (-r)' "bib-unite -r $fileOne $fileTwo | diff $fileTwo -"
  sed -i '/File/d' $fileTwo # Modify one entry in file 2.
  assertFalse 'Keep differing duplicates' "bib-unite $fileOne $fileTwo | diff $fileOne -"
  assertFalse 'Keep differing duplicates (-r)' "bib-unite -r $fileOne $fileTwo | diff $fileTwo -"
}

testSortingFields() {
  # Unsorted entry with final delimiters.
  cat > $fileOne <<EOF
@Article{Czako2019b:pccp,
  Year                     = {2019}
  Journal                  = {Phys. Chem. Chem. Phys.},
  Author                   = {Czak\'{o}, G\'{a}bor and Olasz, Bal\'{a}zs},
}
EOF

  # Sorted entry.
  cat > $fileTwo <<EOF
@Article{Czako2019b:pccp,
  Author                   = {Czak\'{o}, G\'{a}bor and Olasz, Bal\'{a}zs},
  Journal                  = {Phys. Chem. Chem. Phys.},
  Year                     = {2019}
}

EOF

  assertTrue 'Fields are sorted' "bib-unite $fileOne | diff $fileTwo -"
  bib-unite $fileOne | diff $fileTwo -

  # Unsorted entry with correct delimiters.
  cat > $fileOne <<EOF
@Article{Czako2019b:pccp,
  Year                     = {2019},
  Journal                  = {Phys. Chem. Chem. Phys.},
  Author                   = {Czak\'{o}, G\'{a}bor and Olasz, Bal\'{a}zs}
}

EOF

  assertTrue 'Field delimiters are corrected' "bib-unite $fileOne | diff $fileTwo -"
  bib-unite $fileOne | diff $fileTwo -

  assertTrue 'Skip entry sort with »-e«' "bib-unite -e $fileOne | diff $fileOne -"
  bib-unite -e $fileOne | diff $fileOne -

  # Unsorted entry with end of line closing curly brace.
  cat > $fileOne <<EOF
@Article{Czako2019b:pccp,
  Year                     = {2019},
  Journal                  = {Phys. Chem. Chem. Phys.},
  Author                   = {Czak\'{o}, G\'{a}bor and Olasz, Bal\'{a}zs}}
EOF

  assertTrue 'Closing curly brace is corrected' "bib-unite $fileOne | diff $fileTwo -"
  bib-unite $fileOne | diff $fileTwo -
}

# Load and run shUnit2.
. shunit2/shunit2
